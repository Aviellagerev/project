-- Q1: 
CREATE TABLE Users (
    uid INT PRIMARY KEY,
    name VARCHAR(30),
    email VARCHAR(50),
    password VARCHAR(50),
    descr VARCHAR(255),
    country VARCHAR(50)
);

CREATE TABLE Post (
    pid INT PRIMARY KEY,
    uid INT REFERENCES Users(uid),
    content VARCHAR(255),
    imageURL VARCHAR(255),
    pdate DATE,
    ptime TIME
);

CREATE TABLE Comment (
    pid INT,
    cdate DATE,
    ctime TIME,
    uid INT,
    content VARCHAR(255),
    PRIMARY KEY (pid, uid, cdate, ctime),
    FOREIGN KEY (pid) REFERENCES Post(pid),
    FOREIGN KEY (uid) REFERENCES Users(uid)
);

CREATE TABLE Likes (
    uid INT,
    pid INT,
    ldate DATE,
    ltime TIME,
    PRIMARY KEY (uid, pid),
    FOREIGN KEY (uid) REFERENCES Users(uid),
    FOREIGN KEY (pid) REFERENCES Post(pid)
);

CREATE TABLE Follow (
    fuid INT,
    uid INT,
    PRIMARY KEY (fuid, uid),
    FOREIGN KEY (fuid) REFERENCES Users(uid),
    FOREIGN KEY (uid) REFERENCES Users(uid)
);


-- Q2: 

CREATE OR REPLACE FUNCTION trigf1()
RETURNS TRIGGER AS $$
DECLARE
    post_date DATE;
    post_time TIME;
BEGIN
    SELECT pdate, ptime INTO post_date, post_time
    FROM Post
    WHERE pid = NEW.pid;

    IF (NEW.cdate > post_date) OR (NEW.cdate = post_date AND NEW.ctime > post_time) THEN
        RETURN NEW;
    ELSE
        RAISE EXCEPTION 'התגובה חייבת להיות אחרי תאריך ושעת הפוסט.';
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER check_comment_time
BEFORE INSERT ON Comment
FOR EACH ROW
EXECUTE FUNCTION trigf1();


-- Q3:

INSERT INTO Users (uid, name, email, password, descr, country)
VALUES
    (1, 'Avi Cohen', 'avi.cohen@example.com', 'pass123', 'City hiking and photography', 'israel'),
    (2, 'Sara Levi', 'sara.levi@example.com', 'secure456', 'Foodie and blogger', 'israel'),
    (3, 'Dan Ben', 'dan.ben@example.com', 'dan789', 'Tech enthusiast', 'usa'),
    (4, 'Mika Yarden', 'mika.yarden@example.com', 'mika123', 'Love city walks', 'israel'),
    (5, 'Yael Cohen', 'yael.cohen@example.com', 'yael456', 'Travel blogger', 'israel'),
    (6, 'John Smith', 'john.smith@example.com', 'john789', 'Photographer', 'usa'),
    (7, 'Linda Brown', 'linda.brown@example.com', 'linda000', 'Food lover', 'usa');

INSERT INTO Post (pid, uid, content, imageURL, pdate, ptime)
VALUES
    (1, 1, 'city sunset at the beach!', 'http://example.com/sunset.jpg', '2025-05-01', '18:30:00'),
    (2, 2, 'city tried a new recipe, so yummy!', 'http://example.com/food.jpg', '2025-08-02', '12:15:00'),
    (3, 3, 'city about the new tech conference!', 'http://example.com/tech.jpg', '2025-08-03', '09:00:00'),
    (4, 4, 'city lights at night', 'http://example.com/citylights.jpg', '2025-08-04', '20:00:00'),
    (5, 5, 'city morning coffee', 'http://example.com/coffee.jpg', '2025-08-05', '08:30:00'),
    (6, 6, 'Visiting the city park', 'http://example.com/park.jpg', '2025-08-06', '14:15:00'),
    (7, 7, 'city skyline viewa', 'http://example.com/skyline.jpg', '2025-08-07', '18:41:00'),
	(8, 7, 'city skyline viewaaa', 'http://example.com/skyline.jpg', '2025-08-07', '18:42:00'),
	 (9, 7, 'city skyline views', 'http://example.com/skyline.jpg', '2025-08-07', '18:43:00');

INSERT INTO Comment (pid, cdate, ctime, uid, content)
VALUES
    (1, '2025-08-01', '19:00:00', 2, 'Wow, that sunset looks stunning!'),
    (2, '2025-08-02', '13:00:00', 3, 'Share the recipe, please!'),
    (3, '2025-08-03', '10:10:00', 3, 'Which conference is it?'),
    (3, '2025-08-03', '10:30:00', 3, 'Which conference is it?'),
    (3, '2025-08-03', '10:40:00', 3, 'Which conference is it?'),
    (3, '2025-08-03', '10:50:00', 3, 'Which conference is it?'),
    (4, '2025-08-04', '21:00:00', 1, 'Amazing view!'),
    (4, '2025-08-04', '21:15:00', 2, 'Beautiful!'),
    (4, '2025-08-04', '21:30:00', 3, 'Love this city!'),
    (4, '2025-08-04', '21:45:00', 5, 'Fantastic shot!'),
    (5, '2025-08-05', '09:00:00', 1, 'Looks great!'),
    (5, '2025-08-05', '09:30:00', 2, 'I want to visit!'),
    (6, '2025-08-06', '15:00:00', 1, 'Nice place!');

INSERT INTO Likes (uid, pid, ldate, ltime)
VALUES
    (1, 4, '2025-08-04', '22:00:00'),
    (1, 5, '2025-08-05', '10:00:00'),
    (2, 6, '2025-08-06', '16:00:00'),
    (3, 4, '2025-08-04', '22:30:00'),
    (3, 5, '2025-08-05', '11:00:00'),
    (4, 1, '2025-05-01', '19:00:00'),
    (5, 1, '2025-05-01', '19:30:00'),
    (6, 5, '2025-08-05', '12:00:00'),
    (7, 4, '2025-08-04', '23:00:00');

INSERT INTO Follow (fuid, uid)
VALUES
   (2,6),(7,1),(7,2),(7,4);


-- Q4

SELECT pid, uid, content
FROM Post
WHERE EXTRACT(MONTH FROM pdate) = 5
  AND EXTRACT(YEAR FROM pdate) = EXTRACT(YEAR FROM CURRENT_DATE);


-- Q5

SELECT u.uid, u.name, u.country
FROM Users u
JOIN Post p ON u.uid = p.uid
WHERE p.content ILIKE '%city%';


-- Q6

SELECT p.pid, p.content
FROM Post p
JOIN Users u ON p.uid = u.uid
JOIN Comment c ON p.pid = c.pid
WHERE u.country = 'usa'
GROUP BY p.pid, p.content
HAVING COUNT(c.pid) >= 4;


-- Q7

SELECT DISTINCT l.uid AS liker_id, l.pid AS liked_post_id
FROM Likes l
JOIN Post p ON l.pid = p.pid
LEFT JOIN Follow f ON l.uid = f.fuid AND p.uid = f.uid
WHERE f.uid IS NULL;

-- Q8

SELECT u.uid, u.name
FROM Users u
WHERE u.uid NOT IN (SELECT uid FROM Comment)
AND u.uid IN (
    SELECT f.fuid
    FROM Follow f
    JOIN Users u2 ON f.uid = u2.uid
    WHERE u2.country = 'israel'    
    GROUP BY f.fuid                
    HAVING COUNT(*) >= 3          
);
-- Q9 
WITH follow_counts AS (
    SELECT f.fuid, COUNT(*) AS num_followed
    FROM Follow f
    JOIN Users u ON f.fuid = u.uid
    WHERE u.country = 'israel'
    AND f.uid IN (SELECT uid FROM Post GROUP BY uid HAVING COUNT(*) >= 3)
    GROUP BY f.fuid
)
SELECT u.uid, u.name
FROM Users u
JOIN follow_counts fc ON u.uid = fc.fuid
WHERE fc.num_followed = (SELECT MAX(num_followed) FROM follow_counts);
-- Q10
SELECT u.uid, u.name
FROM Users u
WHERE EXISTS (SELECT 1 FROM Follow f WHERE f.fuid = u.uid)
AND NOT EXISTS (
    SELECT 1 FROM Follow f
    WHERE f.fuid = u.uid
    AND NOT EXISTS (
        SELECT 1 FROM Likes l
        JOIN Post p ON l.pid = p.pid
        WHERE l.uid = u.uid
        AND p.uid = f.uid
        AND p.content LIKE '%city%'
    )
);

