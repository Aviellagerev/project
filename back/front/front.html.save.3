<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Shared Folder Login</title>
<style>
body { font-family: Arial; background: #f4f4f4; display:flex; justify-content:center; align-items:center; height:100vh; margin:0; }
.login-container, .upload-container { background: white; padding: 2rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); width: 300px; text-align:center; }
input[type="text"], input[type="password"] { width: 90%; padding:0.5rem; margin:0.5rem 0; border:1px solid #ccc; border-radius:5px; }
button { padding:0.5rem 1rem; border:none; background-color:#007bff; color:white; border-radius:5px; cursor:pointer; }
button:hover { background-color:#0056b3; }
.error { color:red; margin-bottom:1rem; }
.drop-zone { margin-top:1rem; border:2px dashed #ccc; border-radius:10px; padding:2rem; background:#fafafa; transition:0.3s; }
.drop-zone.dragover { background:#e6f7ff; border-color:#3399ff; } 


#upload-card {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* reuse your card look */
  background: white;
  padding: 2rem;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  width: 300px;
  text-align: center;
  z-index: 10;
}

#upload-spacer {
  height: 0; /* will be set dynamically */
}

#uploaded-files-title { text-align: left; margin-top: 1rem; margin-bottom: 0.5rem; }

#file-list {
  width: 300px;            
  list-style-type: none;
  padding-left: 0;
  margin: 0.5rem auto 2rem; /* center the list block; grows downward */
  text-align: left;
}

#file-list li {
  width: 100%;
  text-align: left;
  padding: 8px;
  margin: 4px 0;
  border: 1px solid #ccc;
  border-radius: 5px;
  background: #f9f9f9;
  transition: background 0.2s, border-color 0.2s;
}

#file-list a {
  display: block;
  text-decoration: none;
  color: black;
  font-weight: normal;
}

#file-list a:hover {
  font-weight: bold;
  color: gray;
  cursor: pointer;
}



</style>
</head>
<body>
<div id="login-section" class="login-container">
<h2>Login</h2>
<form id="login-form">
<input type="text" name="username" placeholder="Username" required><br>
<input type="password" name="password" placeholder="Password" required><br>
<button type="submit">Login</button>
</form>
<div id="error-message" class="error"></div>
</div>

<div id="upload-section" style="display:none">
  <!-- centered, fixed card -->
  <div id="upload-card" class="upload-container">
    <h2>Upload Files</h2>
    <div class="drop-zone" id="drop-zone">Drag & Drop files here</div>
    <h3 id="uploaded-files-title">Uploaded Files</h3>
  </div>
  <div id="upload-spacer"></div>
  <ul id="file-list"></ul>
</div>



<script>
const loginForm = document.getElementById('login-form');
const errorMessage = document.getElementById('error-message');
const loginSection = document.getElementById('login-section');
const uploadSection = document.getElementById('upload-section');
const dropZone = document.getElementById('drop-zone');



const uploadCard = document.getElementById('upload-card');
const uploadSpacer = document.getElementById('upload-spacer');
const fileList = document.getElementById('file-list');

function updateSpacerHeight() {
  const h = uploadCard.offsetHeight;
  uploadSpacer.style.height = h + 'px';
}
window.addEventListener('resize', updateSpacerHeight);


const fileList = document.getElementById('file-list');

loginForm.addEventListener('submit', async (e) => {
e.preventDefault();
const formData = new FormData(loginForm);
const res = await fetch('/login',{ method:'POST', body:formData });
if (res.redirected) {
  loginSection.style.display = 'none';
  uploadSection.style.display = 'block';
  document.body.classList.add('upload-mode');
  updateSpacerHeight();
}
else{ const html = await res.text(); const parser = new DOMParser(); const doc = parser.parseFromString(html,'text/html'); 
const error = doc.getElementById('error-message'); errorMessage.innerText = error ? error.innerText : 'Login failed'; }
});
dropZone.addEventListener('dragover', e=>{ e.preventDefault(); dropZone.classList.add('dragover'); });
dropZone.addEventListener('dragleave', ()=>{ dropZone.classList.remove('dragover'); });
//dropZone.addEventListener('drop', async e=>{ e.preventDefault(); dropZone.classList.remove('dragover'); const files = e.dataTransfer.files; for(let file of files){ const formData = new FormData(); formData.append('file',file); await fetch('/upload',{method:'POST', body:formData}); } alert('Files uploaded successfully'); });




dropZone.addEventListener('drop', async e => {
  e.preventDefault();
  dropZone.classList.remove('dragover');

  const files = e.dataTransfer.files;
  for (let file of files) {
    const formData = new FormData();
    formData.append('file', file);

    await fetch('/upload', { method: 'POST', body: formData });

    const li = document.createElement('li');
    const link = document.createElement('a');
    link.textContent = file.name;
    link.href = '/uploads/' + encodeURIComponent(file.name);
    link.target = '_blank';
    li.appendChild(link);
    fileList.appendChild(li);
  }

  alert('Files uploaded successfully');
});



</script>
</body>
</html>
