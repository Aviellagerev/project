Here is your complete "Standard Operating Procedure" (SOP) for your server.

This guide covers how to initialize, start, stop, and debug your application.

Part 1: How to Initialize (The "First Time" or "Fresh Start" Guide)
Follow these steps if you are setting up the project for the first time or want to completely reset it.

Go to your project directory:

Bash

cd ~/project
Create the venv (Virtual Environment): This creates the "sandbox" for your project. (You only need to do this once).

Bash

python3 -m venv venv
Activate the venv: This "enters" the sandbox.

Bash

source venv/bin/activate
(Your prompt will change to show (venv))

Install all dependencies: This reads your requirements.txt file [cite: aviellagerev/project/project-64515d9e92e4aaa8fcbba2e25e929258c4d8589f/requirements.txt] and installs Flask, gunicorn, and gevent into your new venv.

Bash

pip install -r requirements.txt
Initialize the Database: Your app is built to do this automatically on the first run [cite: aviellagerev/project/project-64515d9e92e4aaa8fcbba2e25e929258c4d8589f/back/database.py]. The app will create a new instance/users.db file when you start it in the next section. (If you ever want to reset your database, just delete this file: rm instance/users.db).

Part 2: How to Start Your App (Daily Operation)
This is the standard 5-step process you will follow every time you log in to start your server.

Go to your project directory:

Bash

cd ~/project
Activate the venv: (You must do this every time you log in).

Bash

source venv/bin/activate
Set your SECRET_KEY: This key is required by your back/config.py file [cite: aviellagerev/project/project-64515d9e92e4aaa8fcbba2e25e929258c4d8589f/back/config.py] and is forgotten every time you log out.

Bash

export SECRET_KEY='04d2f9841e7d340a73e63e82308afe2eafdfe78e58cf7aee53d838541dbff049'
Start your Nginx "Front Door": (Nginx often starts automatically, but it's good to check).

Bash

sudo systemctl start nginx
Start your Gunicorn App in the Background: This is the full, correct command to run your app with real-time gevent workers.

Bash
to run in venv
nohup venv/bin/gunicorn -c gunicorn_config.py \
    -k gevent -w 1 \
    -b 127.0.0.1:8000 \
    --access-logfile - \
    'back:create_app()' &

Your app is now live at http://158.178.129.52

To check that it's running: type ps aux | grep gunicorn. You should see several Gunicorn processes.

Part 3: How to Stop Your App
You have two options:

Option 1: Stop ONLY Your App (Gunicorn)
(Use this if you made a code change and want to restart it)

This command finds and stops all Gunicorn processes. Nginx will stay running, but will show a "502 Bad Gateway" error.

Bash

pkill gunicorn
Option 2: Stop the ENTIRE Website (Full Shutdown)
This stops both your app and the Nginx "front door." Your IP will no longer connect at all.

Bash

# 1. Stop your app
pkill gunicorn

# 2. Stop Nginx
sudo systemctl stop nginx
Part 4: How to "Clean Up"
Your app creates files that are not part of your code. Here's what they are and how to clean them.

App Logs (nohup.out):

What it is: The file created by nohup. ALL of your app's print() statements and error messages go here.

Location: ~/project/nohup.out

How to Clean: rm nohup.out (It's safe to delete. It will be re-created on the next start).

Your Database (users.db):

What it is: This is your database file with all users, passwords, and permissions.

Location: ~/project/instance/users.db

How to Clean: rm instance/users.db

!! WARNING !!: Deleting this file permanently erases all your users. This is how you "reset" your app to its initial state. It will be re-created on the next start.

User Files (shared_folder/):

What it is: This folder holds all the files your users have uploaded [cite: aviellagerev/project/project-64515d9e92e4aaa8fcbba2e25e929258c4d8589f/back/config.py].

Location: ~/project/shared_folder/

How to Clean: rm -r shared_folder/

!! WARNING !!: Deleting this folder permanently erases all user-uploaded files.

Python Cache (__pycache__/):

What it is: Harmless temporary files created by Python.

How to Clean: You can safely ignore them, but this command will find and delete them all:

Bash

find . -type d -name "__pycache__" -exec rm -r {} +
Part 5: Where to Find the Logs (How to Debug)
If something is broken, here is where you look for answers.

Problem 1: "My app is crashing, or real-time isn't working."
Where to Look: Your Gunicorn App Log.

Command: This command lets you watch your log file in real-time.

Bash

tail -f nohup.out
(Press CTRL + C to stop watching).

Problem 2: "My website shows a '502 Bad Gateway' error."
What it means: Nginx (the "front door") is working, but it can't find your Gunicorn app (the "kitchen"). This means your app is probably crashed.

Where to Look: The Nginx Error Log.

Command: This shows you the last 50 error messages from Nginx.

Bash

tail -n 50 /var/log/nginx/error.log
Problem 3: "My website won't connect at all (This site can't be reached)."
What it means: Your Nginx "front door" is probably stopped or failed to start.

Where to Look: The Nginx System Log.

Command: This shows you the system-level status and errors for Nginx.

Bash

sudo journalctl -u nginx | tail -n 20
